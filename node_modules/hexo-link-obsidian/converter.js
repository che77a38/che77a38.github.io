"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertLinks = exports.getFirstLinkpathDest = void 0;
// @ts-ignore
var _a = require("fs"), readlinkSync = _a.readlinkSync, lstatSync = _a.lstatSync;
// @ts-ignore
var path = require("path");
// @ts-ignore
var axios = require("axios");
/* -------------------- connect to obsidian -------------------- */
var linkPort = 3333;
// @ts-ignore
function getFirstLinkpathDest(fileLink, sourcePath) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios.get("http://localhost:".concat(linkPort), {
                        params: {
                            fileLink: fileLink,
                            sourcePath: sourcePath
                        },
                        timeout: 3000
                    })];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.data];
            }
        });
    });
}
exports.getFirstLinkpathDest = getFirstLinkpathDest;
/* -------------------- CONVERTERS -------------------- */
var permalink = 'posts/';
// --> Converts single file to provided final format and save back in the file
var convertLinks = function (md, port, permal) {
    if (port === void 0) { port = linkPort; }
    if (permal === void 0) { permal = permalink; }
    return __awaiter(void 0, void 0, void 0, function () {
        var fileText, newFileText;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    linkPort = port;
                    permalink = permal;
                    fileText = md.content;
                    newFileText = convertCommentSymbol(fileText);
                    return [4 /*yield*/, convertWikiLinksToMarkdown(fileText, md)];
                case 1:
                    newFileText = _a.sent();
                    return [2 /*return*/, newFileText
                        // await fs.writeFile(mdFile.source, newFileText)
                    ];
            }
        });
    });
};
exports.convertLinks = convertLinks;
// %% Comment Convert %%
var convertCommentSymbol = function (md) {
    var newMdText = md;
    // --> Get All %% %%
    var commentRegex = /^abbrlink\:\s*(\w+)/g;
    var commentMatches = newMdText.match(commentRegex);
    commentMatches && (newMdText = newMdText.replace(commentMatches[0], ""));
    return newMdText;
};
/* -------------------- LINKS TO MARKDOWN CONVERTER -------------------- */
// --> Converts links within given string from Wiki to MD
var convertWikiLinksToMarkdown = function (md, sourceFile) { return __awaiter(void 0, void 0, void 0, function () {
    var newMdText, linkMatches, wikiMatches, _i, wikiMatches_1, wikiMatch, mdLink, wikiTransclusions, _a, wikiTransclusions_1, wikiTransclusion, wikiTransclusionLink;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                newMdText = md;
                linkMatches = getAllLinkMatchesInFile(md);
                wikiMatches = linkMatches.filter(function (match) { return match.type === "wiki"; });
                _i = 0, wikiMatches_1 = wikiMatches;
                _b.label = 1;
            case 1:
                if (!(_i < wikiMatches_1.length)) return [3 /*break*/, 4];
                wikiMatch = wikiMatches_1[_i];
                return [4 /*yield*/, createLink("markdown", wikiMatch.linkText, wikiMatch.altOrBlockRef, sourceFile)];
            case 2:
                mdLink = _b.sent();
                newMdText = newMdText.replace(wikiMatch.match, mdLink);
                _b.label = 3;
            case 3:
                _i++;
                return [3 /*break*/, 1];
            case 4:
                wikiTransclusions = linkMatches.filter(function (match) { return match.type === "wikiTransclusion"; });
                _a = 0, wikiTransclusions_1 = wikiTransclusions;
                _b.label = 5;
            case 5:
                if (!(_a < wikiTransclusions_1.length)) return [3 /*break*/, 8];
                wikiTransclusion = wikiTransclusions_1[_a];
                return [4 /*yield*/, createLink("mdTransclusion", wikiTransclusion.linkText, wikiTransclusion.altOrBlockRef, sourceFile)];
            case 6:
                wikiTransclusionLink = _b.sent();
                newMdText = newMdText.replace(wikiTransclusion.match, wikiTransclusionLink);
                _b.label = 7;
            case 7:
                _a++;
                return [3 /*break*/, 5];
            case 8: return [2 /*return*/, newMdText];
        }
    });
}); };
/* -------------------- HELPERS -------------------- */
var createLink = function (dest, originalLink, altOrBlockRef, sourceFile) { return __awaiter(void 0, void 0, void 0, function () {
    var finalLink, altText, encodedBlockRef, fileLink, stats, filePath, file, altOrBlockRefContainVerticalBar, altTextSource, altOrBlockRefSource, textTmp;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                finalLink = originalLink;
                altText = "";
                encodedBlockRef = "";
                fileLink = decodeURI(finalLink);
                stats = lstatSync(sourceFile.full_source);
                filePath = stats.isSymbolicLink() ? readlinkSync(sourceFile.full_source) : sourceFile.full_source;
                return [4 /*yield*/, getFirstLinkpathDest(fileLink, filePath)];
            case 1:
                file = _a.sent();
                finalLink = file.extension === "md" ? getAbbrlink(file) : getAbsoluteLink(file);
                altOrBlockRefContainVerticalBar = altOrBlockRef.search(/\|/);
                altTextSource = altOrBlockRef;
                altOrBlockRefSource = altOrBlockRef;
                if (altOrBlockRefContainVerticalBar != -1) {
                    altOrBlockRefSource = altOrBlockRef.split('|')[0];
                    altTextSource = altOrBlockRef.split('|')[1];
                }
                if (altTextSource !== "") {
                    altText = altTextSource;
                }
                else {
                    altText = file ? file.basename : finalLink;
                }
                if (dest === "mdTransclusion") {
                    // --> To skip encoding ^
                    encodedBlockRef = altOrBlockRefSource;
                    if (altOrBlockRef.startsWith("^")) {
                        encodedBlockRef = encodeURI(encodedBlockRef.slice(1));
                        encodedBlockRef = "^".concat(encodedBlockRef);
                    }
                    else {
                        encodedBlockRef = encodeURI(encodedBlockRef);
                    }
                }
                textTmp = "";
                if (encodedBlockRef) {
                    textTmp = "onclick=\"event.preventDefault(); window.location.href=this.href.replace(/\/#/, '#');\"";
                }
                if (["md"].includes(file.extension)) {
                    return [2 /*return*/, "<a href=\"/blog/".concat(finalLink).concat(encodedBlockRef && "#" + encodedBlockRef, "\" ").concat(textTmp, " data-pjax-state target=\"_Blank\" >").concat(altText, "</a>")];
                }
                else if (["png", "jpg", "jpeg", "gif"].includes(file.extension)) {
                    return [2 /*return*/, "![".concat(altText, "](").concat(encodeURI(finalLink), ")")];
                }
                else if (["mp4", "webm", "ogg"].includes(file.extension)) {
                    return [2 /*return*/, "<video src=\"![](".concat(encodeURI(finalLink), ")\" ").concat(decodeURI(encodedBlockRef), "></video>")];
                }
                else {
                    return [2 /*return*/, "[".concat(altText, "](").concat(encodeURI(finalLink), ")")];
                }
                return [2 /*return*/];
        }
    });
}); };
function getAbsoluteLink(file) {
    var fileLink;
    fileLink = path.join(file.vault.adapter.basePath, "/", file.path);
    return fileLink;
}
function getAbbrlink(file) {
    var abbrLink;
    var fileText = file.content;
    var abbrlinkRegex = /^abbrlink\:\s*([\'\"])*(\w+)\1+?/m;
    var abbrlinkMatches = fileText.match(abbrlinkRegex);
    abbrLink = abbrlinkMatches ? permalink + abbrlinkMatches[2] : "404";
    return abbrLink;
}
/* -------------------- TRANSCLUSIONS -------------------- */
var wikiTransclusionRegex = /\[\[(.*?)#.*?\]\]/;
var wikiTransclusionFileNameRegex = /(?<=\[\[)(.*)(?=#)/;
var wikiTransclusionBlockRef = /(?<=#).*?(?=]])/;
var mdTransclusionRegex = /\[.*?]\((.*?)#.*?\)/;
var mdTransclusionFileNameRegex = /(?<=\]\()(.*)(?=#)/;
var mdTransclusionBlockRef = /(?<=#).*?(?=\))/;
var matchIsWikiTransclusion = function (match) {
    return wikiTransclusionRegex.test(match);
};
var matchIsMdTransclusion = function (match) {
    return mdTransclusionRegex.test(match);
};
/**
 * @param match
 * @returns file name if there is a match or empty string if no match
 */
var getTransclusionFileName = function (match) {
    var isWiki = wikiTransclusionRegex.test(match);
    var isMd = mdTransclusionRegex.test(match);
    if (isWiki || isMd) {
        var fileNameMatch = match.match(isWiki ? wikiTransclusionFileNameRegex : mdTransclusionFileNameRegex);
        if (fileNameMatch)
            return fileNameMatch[0];
    }
    return "";
};
/**
 * @param match
 * @returns block ref if there is a match or empty string if no match
 */
var getTransclusionBlockRef = function (match) {
    var isWiki = wikiTransclusionRegex.test(match);
    var isMd = mdTransclusionRegex.test(match);
    if (isWiki || isMd) {
        var blockRefMatch = match.match(isWiki ? wikiTransclusionBlockRef : mdTransclusionBlockRef);
        if (blockRefMatch)
            return blockRefMatch[0];
    }
    return "";
};
var getAllLinkMatchesInFile = function (md) {
    var linkMatches = [];
    var fileText = md;
    // --> Get All WikiLinks
    var wikiRegex = /\!*\[\[.*?\]\]/g;
    var wikiMatches = fileText.match(wikiRegex);
    if (wikiMatches) {
        var fileRegex = /(?<=\[\[).*?(?=(\]|\|))/;
        var altRegex = /(?<=\|).*(?=]])/;
        for (var _i = 0, wikiMatches_2 = wikiMatches; _i < wikiMatches_2.length; _i++) {
            var wikiMatch = wikiMatches_2[_i];
            // --> Check if it is Transclusion
            if (matchIsWikiTransclusion(wikiMatch)) {
                var fileName = getTransclusionFileName(wikiMatch);
                var blockRefMatch = getTransclusionBlockRef(wikiMatch);
                if (fileName !== "" && blockRefMatch !== "") {
                    var linkMatch = {
                        type: "wikiTransclusion",
                        match: wikiMatch,
                        linkText: fileName,
                        altOrBlockRef: blockRefMatch
                        // sourceFilePath: mdFile.path
                    };
                    linkMatches.push(linkMatch);
                    continue;
                }
            }
            // --> Normal Internal Link
            var fileMatch = wikiMatch.match(fileRegex);
            if (fileMatch) {
                // Web links are to be skipped
                // if (fileMatch[0].startsWith("http")) continue
                var altMatch = wikiMatch.match(altRegex);
                var linkMatch = {
                    type: "wiki",
                    match: wikiMatch,
                    linkText: fileMatch[0],
                    altOrBlockRef: altMatch ? altMatch[0] : ""
                    // sourceFilePath: mdFile.path
                };
                linkMatches.push(linkMatch);
            }
        }
    }
    // --> Get All Markdown Links
    var markdownRegex = /\[(^$|.*?)\]\((.*?)\)/g;
    var markdownMatches = fileText.match(markdownRegex);
    if (markdownMatches) {
        var fileRegex = /(?<=\().*(?=\))/;
        var altRegex = /(?<=\[)(^$|.*?)(?=\])/;
        for (var _a = 0, markdownMatches_1 = markdownMatches; _a < markdownMatches_1.length; _a++) {
            var markdownMatch = markdownMatches_1[_a];
            // --> Check if it is Transclusion
            if (matchIsMdTransclusion(markdownMatch)) {
                var fileName = getTransclusionFileName(markdownMatch);
                var blockRefMatch = getTransclusionBlockRef(markdownMatch);
                if (fileName !== "" && blockRefMatch !== "") {
                    var linkMatch = {
                        type: "mdTransclusion",
                        match: markdownMatch,
                        linkText: fileName,
                        altOrBlockRef: blockRefMatch
                        // sourceFilePath: mdFile.path
                    };
                    linkMatches.push(linkMatch);
                    continue;
                }
            }
            // --> Normal Internal Link
            var fileMatch = markdownMatch.match(fileRegex);
            if (fileMatch) {
                // Web links are to be skipped
                if (fileMatch[0].startsWith("http"))
                    continue;
                var altMatch = markdownMatch.match(altRegex);
                var linkMatch = {
                    type: "markdown",
                    match: markdownMatch,
                    linkText: fileMatch[0],
                    altOrBlockRef: altMatch ? altMatch[0] : ""
                    // sourceFilePath: mdFile.path
                };
                linkMatches.push(linkMatch);
            }
        }
    }
    return linkMatches;
};
